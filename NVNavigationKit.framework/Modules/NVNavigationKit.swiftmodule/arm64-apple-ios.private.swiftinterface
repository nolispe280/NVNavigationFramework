// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NVNavigationKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Foundation
import MapboxCoreNavigation
import MapboxDirections
import MapboxNavigation
@_exported import NVNavigationKit
import Polyline
import Swift
import SwiftyJSON
import Turf
import _Concurrency
import _StringProcessing
@objc open class NVibeMultimodalStep : ObjectiveC.NSObject {
  public enum Mode : Swift.String {
    case WALKING
    case TRANSIT
    case CHANGE
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var startAddress: NVNavigationKit.NVibeLocation
  public var endAddress: NVNavigationKit.NVibeLocation
  public var duration: Swift.Double
  public var distance: Swift.Double
  public var mode: NVNavigationKit.NVibeMultimodalStep.Mode
  public var transitInformation: NVNavigationKit.NVibeTransitInformation?
  public var walkingInformation: NVNavigationKit.NVibeWalkingInformation?
  public init(startAddress: NVNavigationKit.NVibeLocation, endAddress: NVNavigationKit.NVibeLocation, duration: Swift.Double, distance: Swift.Double, mode: NVNavigationKit.NVibeMultimodalStep.Mode, transitInformation: NVNavigationKit.NVibeTransitInformation? = nil, walkingInformation: NVNavigationKit.NVibeWalkingInformation? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class NVibeVibration : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum TokenError : Swift.Int {
  case INVALID_TOKEN
  case MAX_ACTIVE_USER_REACHED
  case UNKNOW
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class NVNavigationDirection : ObjectiveC.NSObject {
  public static let shared: NVNavigationKit.NVNavigationDirection
  public func getMultimodalRoute(from startLocation: NVNavigationKit.NVibeLocation, to endLocation: NVNavigationKit.NVibeLocation, includeFullWalking: Swift.Bool = true, completion: @escaping ([NVNavigationKit.NVibeMultimodalRoute]?, NVNavigationKit.RouteError?) -> Swift.Void)
  public func getNextDeparture(from information: NVNavigationKit.NVibeTransitInformation, count: Swift.Int = 1, completion: @escaping ([Swift.String]) -> Swift.Void)
  public func getStartingDirection(from startLocation: NVNavigationKit.NVibeLocation, to endLocation: NVNavigationKit.NVibeLocation, completion: @escaping (CoreLocation.CLLocationDirection?, NVNavigationKit.RouteError?) -> Swift.Void)
  public func getNavigationRoute(from startLocation: NVNavigationKit.NVibeLocation, to endLocation: NVNavigationKit.NVibeLocation, sideStreet: NVNavigationKit.SideStreet? = nil, completion: @escaping ((departure: NVNavigationKit.NVibeLocation, arrival: NVNavigationKit.NVibeLocation, route: NVNavigationKit.NVibeRoute, startingDirection: CoreLocation.CLLocationDirection, solutionFound: Swift.Bool)?, NVNavigationKit.RouteError?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class NVibeLocation : ObjectiveC.NSObject {
  public var address: Swift.String
  public var position: CoreLocation.CLLocationCoordinate2D
  public var access: CoreLocation.CLLocationCoordinate2D
  public init(address: Swift.String? = nil, position: CoreLocation.CLLocationCoordinate2D, access: CoreLocation.CLLocationCoordinate2D? = nil)
  @objc deinit
}
public enum LocationError {
  case noConnection, noLocation
  public static func == (a: NVNavigationKit.LocationError, b: NVNavigationKit.LocationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NVNavigationKit.LocationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc open class NVibeMultimodalRoute : ObjectiveC.NSObject {
  public var startAddress: NVNavigationKit.NVibeLocation
  public var endAddress: NVNavigationKit.NVibeLocation
  public var duration: Swift.Double
  public var distance: Swift.Double
  public var steps: [NVNavigationKit.NVibeMultimodalStep]
  public init(startAddress: NVNavigationKit.NVibeLocation, endAddress: NVNavigationKit.NVibeLocation, duration: Swift.Double, distance: Swift.Double, steps: [NVNavigationKit.NVibeMultimodalStep])
  public func description()
  @objc deinit
}
@objc open class NVibeRoute : ObjectiveC.NSObject, Swift.Codable {
  public var weight: Swift.Double
  public var duration: Swift.Double
  public var distance: Swift.Double
  public var legs: [NVNavigationKit.NVibeLeg]
  public var geometry: Swift.String
  public init(weight: Swift.Double, duration: Swift.Double, distance: Swift.Double, legs: [NVNavigationKit.NVibeLeg], geometry: Swift.String)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers open class NVibeIntersection : ObjectiveC.NSObject, Swift.Codable {
  public var entry: [Swift.Bool]
  public var `in`: Swift.Int?
  public var out: Swift.Int?
  public var geometry_index: Swift.Int
  public var bearings: [Swift.Double]
  public var location: [Swift.Double]
  public init(entry: [Swift.Bool], in: Swift.Int?, out: Swift.Int?, bearings: [Swift.Double], location: [Swift.Double], index: Swift.Int)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc open class NVibeWalkingInformation : ObjectiveC.NSObject {
  public enum Mode : Swift.String {
    case DEFAULT
    case INDOOR
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var startAddress: NVNavigationKit.NVibeLocation
  public var endAddress: NVNavigationKit.NVibeLocation
  public var mode: NVNavigationKit.NVibeWalkingInformation.Mode
  public init(startAddress: NVNavigationKit.NVibeLocation, endAddress: NVNavigationKit.NVibeLocation, mode: NVNavigationKit.NVibeWalkingInformation.Mode)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class NVibeManeuver : ObjectiveC.NSObject, Swift.Codable {
  public var bearing_after: Swift.Double
  public var bearing_before: Swift.Double
  public var type: Swift.String
  public var modifier: Swift.String?
  public var location: [Swift.Double]
  public var instruction: Swift.String
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers open class NVibeTransitInformation : ObjectiveC.NSObject {
  public enum Mode : Swift.String {
    case TRAM
    case TRAIN
    case SUBWAY
    case BUS
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var mode: NVNavigationKit.NVibeTransitInformation.Mode
  public var headsign: Swift.String
  public var backgroundColor: Swift.String
  public var textColor: Swift.String
  public var type: Swift.String
  public var line: Swift.String
  public var stops: [NVNavigationKit.NVibeLocation]
  public var departureTime: Swift.String
  public var duration: Swift.Double
  public init(mode: NVNavigationKit.NVibeTransitInformation.Mode, headsign: Swift.String, backgroundColor: Swift.String, textColor: Swift.String, type: Swift.String, line: Swift.String, stops: [NVNavigationKit.NVibeLocation], departureTime: Swift.String, duration: Swift.Double)
  @objc deinit
}
public enum SideStreet : Swift.String {
  case LEFT
  case RIGHT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol NVNavigationServiceDelegate {
  @objc(navigationService:didStartWithStep:atRemainingRouteDistance:atRemainingStepDistance:withRemainingRouteDuration:withImage:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didStartWith step: NVNavigationKit.NVibeStep, atRemaining routeDistance: CoreLocation.CLLocationDistance, atRemaining stepDistance: CoreLocation.CLLocationDistance, withRemaining routeDuration: Swift.Double, with image: NVNavigationKit.ImageType)
  @objc(navigationService:didUpdateProgress:withRawLocation:snappedToLocation:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didUpdate progress: NVNavigationKit.NVibeRouteProgress, with rawLocation: CoreLocation.CLLocation, snappedTo location: CoreLocation.CLLocation)
  @objc(navigationService:didStopWithInstruction:withImage:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didStopWith instruction: Swift.String, with image: NVNavigationKit.ImageType)
  @objc(navigationService:shouldRerouteFromLocation:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  @objc(navigationService:didRerouteAlongRoute:toDirection:withStep:atRemainingRouteDistance:atRemainingStepDistance:withRemainingRouteDuration:withImage:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didRerouteAlong route: NVNavigationKit.NVibeRoute, to direction: CoreLocation.CLLocationDirection, with step: NVNavigationKit.NVibeStep, atRemaining routeDistance: CoreLocation.CLLocationDistance, atRemaining stepDistance: CoreLocation.CLLocationDistance, withRemaining routeDuration: Swift.Double, with image: NVNavigationKit.ImageType)
  @objc(navigationService:didUpdateUIWithStep:atRemainingRouteDistance:atRemainingStepDistance:withImage:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didUpdateUIWith step: NVNavigationKit.NVibeStep, atRemaining routeDistance: CoreLocation.CLLocationDistance, atRemaining stepDistance: CoreLocation.CLLocationDistance, with image: NVNavigationKit.ImageType)
  @objc(navigationService:didUpdateRightDirectionWithVibration:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didUpdateRightDirectionWith vibration: NVNavigationKit.NVibeVibration)
  @objc(navigationService:willChangeStep:withVibration:atRemainingStepDistance:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, willChange step: NVNavigationKit.NVibeStep, with vibration: NVNavigationKit.NVibeVibration, atRemaining stepDistance: CoreLocation.CLLocationDistance)
  @objc(navigationService:didChangeStep:withVibration:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didChange step: NVNavigationKit.NVibeStep, with vibration: [NVNavigationKit.NVibeVibration])
  @objc(navigationService:didForceChangeSideForStep:atRemainingStepDistance:withVibration:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didForceChangeSideFor step: NVNavigationKit.NVibeStep, atRemaining stepDistance: CoreLocation.CLLocationDistance, with vibration: NVNavigationKit.NVibeVibration)
  @objc(navigationService:didPauseNavigationOnBadAccuracy:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didPauseNavigationOnBadAccuracy: Swift.Bool)
  @objc(navigationService:didFailToPassTokenWithError:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didFailToPassTokenWith error: NVNavigationKit.TokenError)
  @objc(navigationService:fromRoute:shouldGoToNextMultimodalStep:withRemainingMultimodalStep:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, from route: NVNavigationKit.NVibeMultimodalRoute, shouldGoToNext multimodalStep: NVNavigationKit.NVibeMultimodalStep, with remainingMultimodalStep: Swift.Int) -> Swift.Bool
  @objc(navigationService:fromRoute:didChangeMultimodalStep:withRemainingMultimodalStep:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, from route: NVNavigationKit.NVibeMultimodalRoute, didChange multimodalStep: NVNavigationKit.NVibeMultimodalStep, with remainingMultimodalStep: Swift.Int)
  @objc(navigationService:didUpdateTransitToStop:withRemainingStop:) optional func navigationService(_ service: NVNavigationKit.NVNavigationService, didUpdateTransitTo stop: NVNavigationKit.NVibeLocation, with remainingStop: Swift.Int)
}
@objc(NVNavigationService) open class NVNavigationService : ObjectiveC.NSObject {
  weak public var delegate: (any NVNavigationKit.NVNavigationServiceDelegate)?
  public var pauseNavigationWhenBadAccuracy: Swift.Bool
  public var maximumAccuracyAllowed: Swift.Double
  public var distanceBeforePrepareChangeStep: Swift.Double
  public var distanceBetweenRightDirection: Swift.Double
  public var language: Swift.String {
    get
    set
  }
  public init(delegate: (any NVNavigationKit.NVNavigationServiceDelegate)? = nil)
  @objc deinit
  public func startMultimodalNavigation(departure: NVNavigationKit.NVibeLocation, arrival: NVNavigationKit.NVibeLocation, route: NVNavigationKit.NVibeMultimodalRoute)
  public func skipMultimodalStepNavigation()
  public func stopMultimodalNavigation()
  public func startTransitNavigation(departure: NVNavigationKit.NVibeLocation, arrival: NVNavigationKit.NVibeLocation, transit: NVNavigationKit.NVibeTransitInformation)
  public func stopTransitNavigation()
  public func startNavigation(departure: NVNavigationKit.NVibeLocation, arrival: NVNavigationKit.NVibeLocation, route: NVNavigationKit.NVibeRoute)
  public func stopNavigation()
  public func getCurrentLocation(completion: @escaping (CoreLocation.CLLocation?, NVNavigationKit.LocationError?) -> Swift.Void)
}
@objc public protocol NVCompassServiceDelegate {
  @objc(compassService:didCompassUpdateWithDirection:didCompassTrigger:) optional func compassService(_ service: NVNavigationKit.NVCompassService, didCompassUpdateWith direction: CoreLocation.CLLocationDirection, didCompassTrigger: Swift.Bool)
}
@objc(NVCompassService) open class NVCompassService : ObjectiveC.NSObject {
  weak public var delegate: (any NVNavigationKit.NVCompassServiceDelegate)?
  public var isCompassRunning: Swift.Bool
  public init(delegate: (any NVNavigationKit.NVCompassServiceDelegate)? = nil)
  @objc deinit
  public func startCompass(direction: CoreLocation.CLLocationDirection? = nil, retrieveDirectionNavigation: Swift.Bool = false)
  public func stopCompass()
}
public enum RouteError {
  case noConnection, noRoute, invalidToken, unknow
  public static func == (a: NVNavigationKit.RouteError, b: NVNavigationKit.RouteError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NVNavigationKit.RouteError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc open class NVibeRouteProgress : ObjectiveC.NSObject {
  public var remainingDistance: Swift.Double
  public var remainingDuration: Swift.Double
  public var stepProgress: NVNavigationKit.NVibeStepProgress
  public init(remainingDistance: Swift.Double, remainingDuration: Swift.Double, stepProgress: NVNavigationKit.NVibeStepProgress)
  @objc deinit
}
@objc open class NVibeStepProgress : ObjectiveC.NSObject {
  public var remainingDistance: Swift.Double
  public var remainingDuration: Swift.Double
  public var direction: CoreLocation.CLLocationDirection?
  public var currentStep: NVNavigationKit.NVibeStep
  public var nextStep: NVNavigationKit.NVibeStep?
  public init(remainingDistance: Swift.Double, remainingDuration: Swift.Double, direction: CoreLocation.CLLocationDirection?, currentStep: NVNavigationKit.NVibeStep, nextStep: NVNavigationKit.NVibeStep?)
  @objc deinit
}
@objc public enum ImageType : Swift.Int {
  case LEFT
  case RIGHT
  case STRAIGHT
  case CROSS
  case UTURN
  case FINISH
  case NONE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class NVibeLeg : ObjectiveC.NSObject, Swift.Codable {
  public var duration: Swift.Double
  public var steps: [NVNavigationKit.NVibeStep]
  public var weight: Swift.Double
  public var distance: Swift.Double
  public init(duration: Swift.Double, steps: [NVNavigationKit.NVibeStep], weight: Swift.Double, distance: Swift.Double)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc open class NVibeStep : ObjectiveC.NSObject, Swift.Codable {
  public var weight: Swift.Double
  public var intersections: [NVNavigationKit.NVibeIntersection]
  public var distance: Swift.Double
  public var mode: Swift.String
  public var geometry: Swift.String
  public var maneuver: NVNavigationKit.NVibeManeuver
  public var driving_side: Swift.String
  public var duration: Swift.Double
  public var name: Swift.String
  public init(weight: Swift.Double, intersections: [NVNavigationKit.NVibeIntersection], distance: Swift.Double, geometry: Swift.String, maneuver: NVNavigationKit.NVibeManeuver, duration: Swift.Double, name: Swift.String)
  public func getTurnHourDirection() -> Swift.Int
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension NVNavigationKit.NVibeMultimodalStep.Mode : Swift.Equatable {}
extension NVNavigationKit.NVibeMultimodalStep.Mode : Swift.Hashable {}
extension NVNavigationKit.NVibeMultimodalStep.Mode : Swift.RawRepresentable {}
extension NVNavigationKit.TokenError : Swift.Equatable {}
extension NVNavigationKit.TokenError : Swift.Hashable {}
extension NVNavigationKit.TokenError : Swift.RawRepresentable {}
extension NVNavigationKit.LocationError : Swift.Equatable {}
extension NVNavigationKit.LocationError : Swift.Hashable {}
extension NVNavigationKit.NVibeWalkingInformation.Mode : Swift.Equatable {}
extension NVNavigationKit.NVibeWalkingInformation.Mode : Swift.Hashable {}
extension NVNavigationKit.NVibeWalkingInformation.Mode : Swift.RawRepresentable {}
extension NVNavigationKit.NVibeTransitInformation.Mode : Swift.Equatable {}
extension NVNavigationKit.NVibeTransitInformation.Mode : Swift.Hashable {}
extension NVNavigationKit.NVibeTransitInformation.Mode : Swift.RawRepresentable {}
extension NVNavigationKit.SideStreet : Swift.Equatable {}
extension NVNavigationKit.SideStreet : Swift.Hashable {}
extension NVNavigationKit.SideStreet : Swift.RawRepresentable {}
extension NVNavigationKit.RouteError : Swift.Equatable {}
extension NVNavigationKit.RouteError : Swift.Hashable {}
extension NVNavigationKit.ImageType : Swift.Equatable {}
extension NVNavigationKit.ImageType : Swift.Hashable {}
extension NVNavigationKit.ImageType : Swift.RawRepresentable {}
